feat: Migrate VoloApp framework from volo_vhdl (Phase 1 complete)

Migrate the complete VoloApp abstraction framework from volo_vhdl_external_/
into EZ-EMFI project. VoloApp provides a 3-layer hardware abstraction for
deploying FPGA applications to Moku platform with human-friendly register
interfaces and automatic VHDL code generation.

Architecture (3 Layers):
- Layer 1: MCC_TOP_volo_loader.vhd (CustomWrapper impl, static shared)
- Layer 2: <AppName>_volo_shim.vhd (register mapping, generated)
- Layer 3: <AppName>_volo_main.vhd (application logic, hand-written)

Components Added:

Python Infrastructure (models/volo/):
- app_register.py: Register type system (COUNTER_8BIT, PERCENT, BUTTON)
- volo_app.py: VoloApp Pydantic model with VHDL generation methods
- __init__.py: Package exports

VHDL Infrastructure (shared/volo/):
- volo_common_pkg.vhd: Common constants (VOLO_READY, BRAM, register ranges)
- volo_bram_loader.vhd: 4KB BRAM loading FSM (CR10-CR14 protocol)
- MCC_TOP_volo_loader.vhd: Layer 1 static top (implements CustomWrapper)
- templates/volo_shim_template.vhd: Jinja2 template for shim generation
- templates/volo_main_template.vhd: Jinja2 template for main skeleton

Code Generation Tools (tools/):
- generate_volo_app.py: CLI tool for generating VHDL from YAML config

Configuration:
- DS1120-PD_app.yaml: Complete DS1120-PD interface definition (11 registers)

Dependencies (pyproject.toml):
- pydantic >=2.0.0: Data validation and models
- jinja2 >=3.0.0: Template rendering
- pyyaml >=6.0.0: YAML parsing
- rich >=13.0.0: Fancy console output

Testing Results:
- ✓ YAML loading: DS1120-PD config loads successfully
- ✓ VHDL generation: Produces valid 9KB shim + main template
- ✓ CLI tool: Runs with proper validation and pretty output
- ✓ All dependencies: Installed and locked with uv

Documentation:
- VOLO_FRAMEWORK_MIGRATION.md: Phase 1 summary and Phase 2 plan

Design Principles:
- MCC-agnostic application code (friendly signal names only)
- Single source of truth (YAML → generated VHDL)
- Consistent 4KB BRAM loading phase (even if unused by app)
- Maximum 11 application registers (CR20-CR30)

Register Map:
- CR0[31:29]: VOLO_READY control scheme (volo_ready, user_enable, clk_enable)
- CR10-CR14: BRAM loader protocol (4KB buffer streaming)
- CR20-CR30: Application registers (human-friendly interface)

Next Phase (Phase 2):
- Create Layer 1 Top.vhd for DS1120-PD
- Verify existing VHDL matches generated output
- Test 3-layer architecture with CocotB
- Update build system for MCC CloudCompile packaging

References:
- volo_vhdl_external_/ (source of framework)
- outside_docs_helpme/VOLO_APP_*.md (design documentation)
- DCSequencer/ (simple CustomWrapper reference)

Co-Authored-By: Claude <noreply@anthropic.com>
