=== SHIM FILE COMPARISON ===

--- VHDL/DS1120_PD_volo_shim.vhd	2025-10-26 18:02:43
+++ comparison_test/DS1120-PD_volo_shim.vhd	2025-10-27 21:50:18
@@ -1,6 +1,6 @@
 --------------------------------------------------------------------------------
--- File: DS1120_PD_volo_shim.vhd
--- Generated: 2025-10-26 17:51:07
+-- File: DS1120-PD_volo_shim.vhd
+-- Generated: 2025-10-27 21:50:18
 -- Generator: tools/generate_volo_app.py
 --
 -- ⚠️  GENERATED FILE - DO NOT EDIT MANUALLY ⚠️
@@ -14,8 +14,8 @@
 --
 -- Layer 2 of 3-Layer VoloApp Architecture:
 --   Layer 1: MCC_TOP_volo_loader.vhd (static, shared)
---   Layer 2: DS1120_PD_volo_shim.vhd (THIS FILE - generated)
---   Layer 3: DS1120_PD_volo_main.vhd (hand-written app logic)
+--   Layer 2: DS1120-PD_volo_shim.vhd (THIS FILE - generated)
+--   Layer 3: DS1120-PD_volo_main.vhd (hand-written app logic)
 --
 -- Register Mapping:
 
@@ -54,7 +54,7 @@
 library WORK;
 use WORK.volo_common_pkg.all;
 
-entity DS1120_PD_volo_shim is
+entity DS1120-PD_volo_shim is
     port (
         ------------------------------------------------------------------------
         -- Clock and Reset
@@ -113,9 +113,9 @@
         OutputA     : out std_logic_vector(31 downto 0);
         OutputB     : out std_logic_vector(31 downto 0)
     );
-end entity DS1120_PD_volo_shim;
+end entity DS1120-PD_volo_shim;
 
-architecture rtl of DS1120_PD_volo_shim is
+architecture rtl of DS1120-PD_volo_shim is
 
     ----------------------------------------------------------------------------
     -- Friendly Signal Declarations (MCC-Agnostic Interface)
@@ -198,7 +198,7 @@
     --
     -- MCC-agnostic interface using friendly signal names only
     ----------------------------------------------------------------------------
-    APP_MAIN_INST: entity WORK.DS1120_PD_volo_main
+    APP_MAIN_INST: entity WORK.DS1120-PD_volo_main
         port map (
             -- Standard Control Signals
             Clk     => Clk,

=== MAIN FILE COMPARISON ===

--- VHDL/DS1120_PD_volo_main.vhd	2025-10-26 18:41:11
+++ comparison_test/DS1120-PD_volo_main.vhd	2025-10-27 21:50:18
@@ -1,31 +1,61 @@
 --------------------------------------------------------------------------------
--- File: DS1120_PD_volo_main.vhd
--- Description: Main application logic for DS1120-PD EMFI probe driver
+-- File: DS1120-PD_volo_main.vhd
+-- Generated: 2025-10-27 21:50:18
+-- Generator: tools/generate_volo_app.py (template only)
 --
--- This module integrates:
---   - FSM core (ds1120_pd_fsm) for state control
---   - Clock divider for timing control
---   - Threshold trigger for trigger detection
---   - FSM observer for debug visualization
---   - Safety features (voltage clamping, timing enforcement)
+-- Description:
+--   Application logic for DS1120-PD VoloApp.
+--   MCC-agnostic interface with friendly signal names.
 --
 -- Layer 3 of 3-Layer VoloApp Architecture:
 --   Layer 1: MCC_TOP_volo_loader.vhd (static, shared)
 --   Layer 2: DS1120-PD_volo_shim.vhd (generated, register mapping)
---   Layer 3: DS1120-PD_volo_main.vhd (THIS FILE - application logic)
+--   Layer 3: DS1120-PD_volo_main.vhd (THIS FILE - hand-written logic)
 --
--- Author: VOLO Team
--- Date: 2025-01-27
+-- Developer Notes:
+--   - This file is YOURS to edit - implement your application logic here
+--   - ZERO knowledge of Control Registers (CR numbers)
+--   - Work with friendly signal names only
+--   - Standard control signals follow project conventions:
+--       Priority: Reset > ClkEn > Enable
+--   - BRAM interface is always exposed (ignore if unused)
+--
+-- Application Signals:
+
+--   armed: Arm the probe driver (one-shot operation)
+
+--   force_fire: Manual trigger for testing (bypasses threshold)
+
+--   reset_fsm: Reset state machine to READY state
+
+--   timing_control: Clock divider [7:4] and delay upper [3:0]
+
+--   delay_lower: Armed timeout delay lower 8 bits (with CR23[3:0] forms 12-bit)
+
+--   firing_duration: Number of cycles to remain in FIRING state (max 32)
+
+--   cooling_duration: Number of cycles to remain in COOLING state (min 8)
+
+--   trigger_thresh_high: Trigger voltage threshold [15:8] (2.4V = 0x3D)
+
+--   trigger_thresh_low: Trigger voltage threshold [7:0] (2.4V = 0xCF)
+
+--   intensity_high: Output intensity voltage [15:8] (clamped to 3.0V max)
+
+--   intensity_low: Output intensity voltage [7:0]
+
+--
+-- References:
+--   - docs/VOLO_APP_DESIGN.md
+--   - DS1120-PD_app.yaml
+--   - CLAUDE.md "Standard Control Signals"
 --------------------------------------------------------------------------------
 
 library IEEE;
 use IEEE.std_logic_1164.all;
 use IEEE.numeric_std.all;
 
--- DS1120-PD package with constants
-use work.ds1120_pd_pkg.all;
-
-entity DS1120_PD_volo_main is
+entity DS1120-PD_volo_main is
     port (
         ------------------------------------------------------------------------
         -- Standard Control Signals
@@ -40,258 +70,171 @@
         -- Application Signals (Friendly Names)
         -- These are mapped from Control Registers by the shim layer
         ------------------------------------------------------------------------
-        armed               : in  std_logic;  -- Arm the probe driver
-        force_fire          : in  std_logic;  -- Manual trigger
-        reset_fsm           : in  std_logic;  -- Reset state machine
-        timing_control      : in  std_logic_vector(7 downto 0);  -- [7:4]=clk_div, [3:0]=delay_upper
-        delay_lower         : in  std_logic_vector(7 downto 0);  -- Delay lower 8 bits
-        firing_duration     : in  std_logic_vector(7 downto 0);  -- Firing cycles
-        cooling_duration    : in  std_logic_vector(7 downto 0);  -- Cooling cycles
-        trigger_thresh_high : in  std_logic_vector(7 downto 0);  -- Threshold [15:8]
-        trigger_thresh_low  : in  std_logic_vector(7 downto 0);  -- Threshold [7:0]
-        intensity_high      : in  std_logic_vector(7 downto 0);  -- Intensity [15:8]
-        intensity_low       : in  std_logic_vector(7 downto 0);  -- Intensity [7:0]
 
+        armed : in  std_logic;  -- Arm the probe driver (one-shot operation)
+
+        force_fire : in  std_logic;  -- Manual trigger for testing (bypasses threshold)
+
+        reset_fsm : in  std_logic;  -- Reset state machine to READY state
+
+        timing_control : in  std_logic_vector(7 downto 0);  -- Clock divider [7:4] and delay upper [3:0]
+
+        delay_lower : in  std_logic_vector(7 downto 0);  -- Armed timeout delay lower 8 bits (with CR23[3:0] forms 12-bit)
+
+        firing_duration : in  std_logic_vector(7 downto 0);  -- Number of cycles to remain in FIRING state (max 32)
+
+        cooling_duration : in  std_logic_vector(7 downto 0);  -- Number of cycles to remain in COOLING state (min 8)
+
+        trigger_thresh_high : in  std_logic_vector(7 downto 0);  -- Trigger voltage threshold [15:8] (2.4V = 0x3D)
+
+        trigger_thresh_low : in  std_logic_vector(7 downto 0);  -- Trigger voltage threshold [7:0] (2.4V = 0xCF)
+
+        intensity_high : in  std_logic_vector(7 downto 0);  -- Output intensity voltage [15:8] (clamped to 3.0V max)
+
+        intensity_low : in  std_logic_vector(7 downto 0);  -- Output intensity voltage [7:0]
+
+
         ------------------------------------------------------------------------
-        -- BRAM Interface (Reserved for future use)
+        -- BRAM Interface (Always Exposed)
+        -- 4KB buffer loaded via volo_loader.py during deployment
+        -- Ignore if your application doesn't need BRAM
         ------------------------------------------------------------------------
-        bram_addr : in  std_logic_vector(11 downto 0);
-        bram_data : in  std_logic_vector(31 downto 0);
-        bram_we   : in  std_logic;
+        bram_addr : in  std_logic_vector(11 downto 0);  -- Address (word-aligned)
+        bram_data : in  std_logic_vector(31 downto 0);  -- Data
+        bram_we   : in  std_logic;                      -- Write enable
 
         ------------------------------------------------------------------------
         -- MCC I/O
-        -- InputA: External trigger signal
-        -- InputB: Probe current monitor
-        -- OutputA: Trigger output to probe
-        -- OutputB: Intensity/debug output
+        -- Connect to Moku platform inputs/outputs
         ------------------------------------------------------------------------
         InputA  : in  std_logic_vector(31 downto 0);
         InputB  : in  std_logic_vector(31 downto 0);
         OutputA : out std_logic_vector(31 downto 0);
         OutputB : out std_logic_vector(31 downto 0)
     );
-end entity DS1120_PD_volo_main;
+end entity DS1120-PD_volo_main;
 
-architecture rtl of DS1120_PD_volo_main is
+architecture rtl of DS1120-PD_volo_main is
 
     ----------------------------------------------------------------------------
     -- Internal Signals
+    -- TODO: Declare your internal signals here
     ----------------------------------------------------------------------------
 
-    -- Clock divider signals
-    signal clk_div_sel      : std_logic_vector(7 downto 0);
-    signal divided_clk_en   : std_logic;
-    signal clk_div_status   : std_logic_vector(7 downto 0);
+    -- Example: Counters, FSM states, intermediate results, etc.
+    -- signal counter : unsigned(31 downto 0);
+    -- signal state   : std_logic_vector(1 downto 0);
 
-    -- 16-bit reconstructed values
-    signal trigger_threshold : signed(15 downto 0);
-    signal intensity_value   : signed(15 downto 0);
-    signal intensity_clamped : signed(15 downto 0);
-    signal arm_timeout      : unsigned(11 downto 0);
+    ----------------------------------------------------------------------------
+    -- Constants
+    -- TODO: Define your application constants here
+    ----------------------------------------------------------------------------
 
-    -- Input signals (from MCC I/O)
-    signal trigger_input    : signed(15 downto 0);
-    signal monitor_input    : signed(15 downto 0);
+    -- Example: FSM state encodings, thresholds, defaults
+    -- constant IDLE_STATE : std_logic_vector(1 downto 0) := "00";
+    -- constant MAX_COUNT  : natural := 1000;
 
-    -- Threshold trigger signals
-    signal trigger_detected : std_logic;
-    signal above_threshold  : std_logic;
-    signal crossing_count   : unsigned(15 downto 0);
+begin
 
-    -- FSM core signals
-    signal fsm_state        : std_logic_vector(2 downto 0);
-    signal firing_active    : std_logic;
-    signal was_triggered    : std_logic;
-    signal timed_out        : std_logic;
-    signal fire_count       : unsigned(3 downto 0);
-    signal spurious_count   : unsigned(3 downto 0);
+    ----------------------------------------------------------------------------
+    -- TODO: Implement Your Application Logic Here
+    --
+    -- Standard Control Signal Pattern:
+    --
+    -- process(Clk, Reset)
+    -- begin
+    --     if Reset = '1' then
+    --         -- Reset: All outputs to safe defaults
+    --         OutputA <= (others => '0');
+    --         OutputB <= (others => '0');
+    --         -- Reset internal state
+    --
+    --     elsif rising_edge(Clk) then
+    --         if ClkEn = '1' then
+    --             if Enable = '1' then
+    --                 -- Normal operation: Implement functionality
+    --                 -- Use friendly signals:
 
-    -- Output signals
-    signal trigger_out      : signed(15 downto 0);
-    signal intensity_out    : signed(15 downto 0);
+    --                 --   armed
 
-    -- FSM observer signals
-    signal fsm_state_6bit   : std_logic_vector(5 downto 0);
-    signal debug_voltage    : signed(15 downto 0);
+    --                 --   force_fire
 
-    -- Status register
-    signal status_reg       : std_logic_vector(15 downto 0);
+    --                 --   reset_fsm
 
-begin
+    --                 --   timing_control
 
-    ----------------------------------------------------------------------------
-    -- Signal Reconstruction
-    ----------------------------------------------------------------------------
+    --                 --   delay_lower
 
-    -- Extract clock divider selection from timing control
-    clk_div_sel <= "0000" & timing_control(7 downto 4);  -- 4-bit selection
+    --                 --   firing_duration
 
-    -- Reconstruct 12-bit arm timeout value
-    arm_timeout <= unsigned(timing_control(3 downto 0) & delay_lower);
+    --                 --   cooling_duration
 
-    -- Reconstruct 16-bit threshold and intensity values
-    trigger_threshold <= signed(trigger_thresh_high & trigger_thresh_low);
-    intensity_value   <= signed(intensity_high & intensity_low);
+    --                 --   trigger_thresh_high
 
-    -- Extract input signals from MCC I/O (16-bit signed in 32-bit containers)
-    trigger_input <= signed(InputA(15 downto 0));
-    monitor_input <= signed(InputB(15 downto 0));
+    --                 --   trigger_thresh_low
 
-    ----------------------------------------------------------------------------
-    -- Clock Divider Instance
-    -- Provides divided clock enable for FSM timing control
-    ----------------------------------------------------------------------------
-    U_CLK_DIV: entity work.volo_clk_divider
-        generic map (
-            MAX_DIV => 16  -- Max division ratio
-        )
-        port map (
-            clk      => Clk,
-            rst_n    => not Reset,
-            enable   => Enable,
-            div_sel  => clk_div_sel,
-            clk_en   => divided_clk_en,
-            stat_reg => clk_div_status
-        );
+    --                 --   intensity_high
 
-    ----------------------------------------------------------------------------
-    -- Threshold Trigger Instance
-    -- Detects when trigger input crosses threshold
-    ----------------------------------------------------------------------------
-    U_TRIGGER: entity work.volo_voltage_threshold_trigger_core
-        port map (
-            clk            => Clk,
-            reset          => Reset,
-            voltage_in     => trigger_input,
-            threshold_high => trigger_threshold,
-            threshold_low  => trigger_threshold - x"0100",  -- Small hysteresis
-            enable         => Enable,
-            mode           => '0',  -- Rising edge trigger
-            trigger_out    => trigger_detected,
-            above_threshold => above_threshold,
-            crossing_count => crossing_count
-        );
+    --                 --   intensity_low
 
+    --
+    --             else
+    --                 -- Idle: Hold state, outputs parked
+    --                 OutputA <= (others => '0');
+    --                 OutputB <= (others => '0');
+    --             end if;
+    --         end if;
+    --         -- ClkEn='0': Hold state (no updates)
+    --     end if;
+    -- end process;
     ----------------------------------------------------------------------------
-    -- FSM Core Instance
-    -- Main state machine for probe control
-    ----------------------------------------------------------------------------
-    U_FSM: entity work.ds1120_pd_fsm
-        port map (
-            clk             => Clk,
-            rst_n           => not Reset,
-            enable          => Enable,
-            clk_en          => divided_clk_en,
-            arm_cmd         => armed,
-            force_fire      => force_fire,
-            reset_fsm       => reset_fsm,
-            delay_count     => arm_timeout,
-            firing_duration => unsigned(firing_duration),
-            cooling_duration => unsigned(cooling_duration),
-            trigger_detected => trigger_detected,
-            current_state   => fsm_state,
-            firing_active   => firing_active,
-            was_triggered   => was_triggered,
-            timed_out       => timed_out,
-            fire_count      => fire_count,
-            spurious_count  => spurious_count
-        );
 
-    ----------------------------------------------------------------------------
-    -- Output Control with Safety Clamping
-    ----------------------------------------------------------------------------
-    process(Clk, Reset)
-    begin
-        if Reset = '1' then
-            trigger_out <= (others => '0');
-            intensity_out <= (others => '0');
-            intensity_clamped <= (others => '0');
-        elsif rising_edge(Clk) then
-            if Enable = '1' then
-                -- Apply safety clamping to intensity
-                intensity_clamped <= clamp_voltage(intensity_value, MAX_INTENSITY_3V0);
+    -- Placeholder: Remove when implementing
+    OutputA <= (others => '0');
+    OutputB <= (others => '0');
 
-                -- Control outputs based on FSM state
-                if firing_active = '1' then
-                    -- During firing: output trigger threshold and clamped intensity
-                    trigger_out <= trigger_threshold;
-                    intensity_out <= intensity_clamped;
-                else
-                    -- Safe state: zero outputs
-                    trigger_out <= (others => '0');
-                    intensity_out <= (others => '0');
-                end if;
-            else
-                -- When disabled, force safe state
-                trigger_out <= (others => '0');
-                intensity_out <= (others => '0');
-            end if;
-        end if;
-    end process;
-
     ----------------------------------------------------------------------------
-    -- FSM Observer for Debug Visualization
-    -- Maps 3-bit FSM state to oscilloscope-visible voltage
+    -- Optional: BRAM Instantiation
+    --
+    -- If your application uses the 4KB buffer:
+    --
+    -- BRAM_INST: entity WORK.bram_4kb
+    --     port map (
+    --         clk     => Clk,
+    --         we      => bram_we,
+    --         addr    => bram_addr,
+    --         din     => bram_data,
+    --         dout    => bram_read_data
+    --     );
     ----------------------------------------------------------------------------
 
-    -- Pad 3-bit state to 6-bit for observer
-    fsm_state_6bit <= "000" & fsm_state;
-
-    U_OBSERVER: entity work.fsm_observer
-        generic map (
-            NUM_STATES => 8,
-            V_MIN => 0.0,
-            V_MAX => 2.5,
-            FAULT_STATE_THRESHOLD => 7,  -- State 111 is fault
-            STATE_0_NAME => "READY",
-            STATE_1_NAME => "ARMED",
-            STATE_2_NAME => "FIRING",
-            STATE_3_NAME => "COOLING",
-            STATE_4_NAME => "DONE",
-            STATE_5_NAME => "TIMEDOUT",
-            STATE_6_NAME => "RESERVED",
-            STATE_7_NAME => "HARDFAULT"
-        )
-        port map (
-            clk          => Clk,
-            reset        => not Reset,
-            state_vector => fsm_state_6bit,
-            voltage_out  => debug_voltage
-        );
-
     ----------------------------------------------------------------------------
-    -- Status Register Assembly
+    -- Development Tips:
+    --
+    -- 1. MCC-Agnostic Design:
+    --    - Never reference CR numbers in this file
+    --    - Use friendly signal names only
+    --    - Makes code portable and testable
+    --
+    -- 2. Control Signal Priority:
+    --    - Reset: Forces safe state (highest priority)
+    --    - ClkEn: Freezes sequential logic when low
+    --    - Enable: Gates functional work
+    --
+    -- 3. Testing:
+    --    - Create CocotB tests in tests/test_ds1120-pd_volo.py
+    --    - Test with friendly signals directly
+    --    - Simulate without MCC infrastructure
+    --
+    -- 4. BRAM Usage:
+    --    - Loaded during deployment via volo_loader.py
+    --    - Contains application-specific data (LUTs, waveforms, etc.)
+    --    - Read-only after loading (typically)
+    --
+    -- 5. References:
+    --    - CLAUDE.md: Standard control signals, coding standards
+    --    - tests/README.md: CocotB testing framework
+    --    - docs/VOLO_APP_DESIGN.md: Complete architecture
     ----------------------------------------------------------------------------
-    status_reg(15 downto 13) <= fsm_state;              -- Current FSM state
-    status_reg(12)           <= was_triggered;          -- Probe was triggered
-    status_reg(11)           <= timed_out;              -- Armed timeout occurred
-    status_reg(10)           <= '1' when fire_count = "1111" else '0';  -- Max fires reached
-    status_reg(9 downto 8)   <= "00";                   -- Reserved
-    status_reg(7 downto 4)   <= std_logic_vector(spurious_count);  -- Spurious triggers
-    status_reg(3 downto 0)   <= std_logic_vector(fire_count);       -- Fire count
 
-    ----------------------------------------------------------------------------
-    -- Pack outputs to MCC format
-    ----------------------------------------------------------------------------
-
-    -- OutputA: Trigger output to probe (16-bit signed in 32-bit container)
-    OutputA(15 downto 0)  <= std_logic_vector(trigger_out);
-    OutputA(31 downto 16) <= (others => trigger_out(15));  -- Sign extend
-
-    -- OutputB: Intensity output OR debug voltage (selectable)
-    -- For normal operation: intensity_out
-    -- For debug: debug_voltage from FSM observer
-    OutputB(15 downto 0)  <= std_logic_vector(debug_voltage);  -- Use debug output
-    OutputB(31 downto 16) <= (others => debug_voltage(15));     -- Sign extend
-
-    ----------------------------------------------------------------------------
-    -- BRAM Reserved for Future Use
-    -- Could store:
-    --   - Waveform patterns for shaped pulses
-    --   - Calibration data
-    --   - Timing sequence tables
-    --   - Multi-shot patterns
-    ----------------------------------------------------------------------------
-
 end architecture rtl;
\ No newline at end of file
