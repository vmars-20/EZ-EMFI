--------------------------------------------------------------------------------
-- File: {{ app_name }}_volo_shim.vhd
-- Generated: {{ timestamp }}
-- Generator: tools/generate_volo_app.py
--
-- ⚠️  GENERATED FILE - DO NOT EDIT MANUALLY ⚠️
-- This file is automatically generated from the VoloApp model.
-- To modify, update {{ app_name }}_app.yaml and regenerate.
--
-- Description:
--   Register mapping shim for {{ app_name }} VoloApp.
--   Maps raw Control Registers (CR20-CR30) to friendly signal names
--   and instantiates the application main entity.
--
-- Layer 2 of 3-Layer VoloApp Architecture:
--   Layer 1: MCC_TOP_volo_loader.vhd (static, shared)
--   Layer 2: {{ app_name }}_volo_shim.vhd (THIS FILE - generated)
--   Layer 3: {{ app_name }}_volo_main.vhd (hand-written app logic)
--
-- Register Mapping:
{% for reg in registers %}
--   CR{{ reg.cr_number }}: {{ reg.original_name }} → {{ reg.friendly_name }} : {{ reg.vhdl_type }}
{% endfor %}
--
-- References:
--   - docs/VOLO_APP_DESIGN.md
--   - {{ app_name }}_app.yaml
--------------------------------------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

library WORK;
use WORK.volo_common_pkg.all;

entity {{ app_name }}_volo_shim is
    port (
        ------------------------------------------------------------------------
        -- Clock and Reset
        ------------------------------------------------------------------------
        Clk         : in  std_logic;
        Reset       : in  std_logic;  -- Active-high reset

        ------------------------------------------------------------------------
        -- VOLO Control Signals (from MCC_TOP_volo_loader)
        ------------------------------------------------------------------------
        volo_ready  : in  std_logic;  -- CR0[31] - Set by loader
        user_enable : in  std_logic;  -- CR0[30] - User control
        clk_enable  : in  std_logic;  -- CR0[29] - Clock gating
        loader_done : in  std_logic;  -- BRAM loader FSM done signal

        ------------------------------------------------------------------------
        -- Application Registers (from MCC_TOP_volo_loader)
        -- Raw Control Registers CR20-CR30
        ------------------------------------------------------------------------
{% for cr_num in cr_numbers_used %}
        app_reg_{{ cr_num }} : in  std_logic_vector(31 downto 0);
{% endfor %}

        ------------------------------------------------------------------------
        -- BRAM Interface (from volo_bram_loader FSM)
        ------------------------------------------------------------------------
        bram_addr   : in  std_logic_vector(11 downto 0);  -- 4KB address space
        bram_data   : in  std_logic_vector(31 downto 0);  -- 32-bit data
        bram_we     : in  std_logic;                      -- Write enable

        ------------------------------------------------------------------------
        -- MCC I/O (from CustomWrapper)
        ------------------------------------------------------------------------
        InputA      : in  std_logic_vector(31 downto 0);
        InputB      : in  std_logic_vector(31 downto 0);
        OutputA     : out std_logic_vector(31 downto 0);
        OutputB     : out std_logic_vector(31 downto 0)
    );
end entity {{ app_name }}_volo_shim;

architecture rtl of {{ app_name }}_volo_shim is

    ----------------------------------------------------------------------------
    -- Friendly Signal Declarations (MCC-Agnostic Interface)
    ----------------------------------------------------------------------------
{% for reg in registers %}
    signal {{ reg.friendly_name }} : {{ reg.vhdl_type }};  -- {{ reg.description }}
{% endfor %}

    ----------------------------------------------------------------------------
    -- Global Enable Signal
    -- Combines all VOLO_READY control bits for safe operation
    ----------------------------------------------------------------------------
    signal global_enable : std_logic;

begin

    ----------------------------------------------------------------------------
    -- Global Enable Computation
    --
    -- All 4 conditions must be met for app to operate:
    --   1. volo_ready  = 1  (loader has deployed bitstream)
    --   2. user_enable = 1  (user has enabled module)
    --   3. clk_enable  = 1  (clock gating enabled)
    --   4. loader_done = 1  (BRAM loading complete)
    ----------------------------------------------------------------------------
    global_enable <= combine_volo_ready(volo_ready, user_enable, clk_enable, loader_done);

    ----------------------------------------------------------------------------
    -- Register Mapping: Control Registers → Friendly Signals
    --
    -- Extract appropriate bit ranges from raw Control Registers
    -- based on register type (COUNTER_8BIT, PERCENT, BUTTON)
    ----------------------------------------------------------------------------
{% for reg in registers %}
    {{ reg.friendly_name }} <= app_reg_{{ reg.cr_number }}{{ reg.bit_range }};  -- {{ reg.original_name }}
{% endfor %}

    ----------------------------------------------------------------------------
    -- Instantiate Application Main Entity
    --
    -- MCC-agnostic interface using friendly signal names only
    ----------------------------------------------------------------------------
    APP_MAIN_INST: entity WORK.{{ app_name }}_volo_main
        port map (
            -- Standard Control Signals
            Clk     => Clk,
            Reset   => Reset,
            Enable  => global_enable,
            ClkEn   => clk_enable,

            -- Friendly Application Signals
{% for reg in registers %}
            {{ reg.friendly_name }} => {{ reg.friendly_name }},
{% endfor %}

            -- BRAM Interface (always exposed for consistency)
            bram_addr => bram_addr,
            bram_data => bram_data,
            bram_we   => bram_we,

            -- MCC I/O
            InputA  => InputA,
            InputB  => InputB,
            OutputA => OutputA,
            OutputB => OutputB
        );

end architecture rtl;
