--------------------------------------------------------------------------------
-- File: DS1140_PD_volo_shim.vhd
-- Generated: 2025-10-28 03:25:21
-- Generator: tools/generate_volo_app.py
--
-- ⚠️  GENERATED FILE - DO NOT EDIT MANUALLY ⚠️
-- This file is automatically generated from the VoloApp model.
-- To modify, update DS1140_PD_app.yaml and regenerate.
--
-- Description:
--   Register mapping shim for DS1140_PD VoloApp.
--   Maps raw Control Registers (CR20-CR30) to friendly signal names
--   and instantiates the application main entity.
--
-- Layer 2 of 3-Layer VoloApp Architecture:
--   Layer 1: MCC_TOP_volo_loader.vhd (static, shared)
--   Layer 2: DS1140_PD_volo_shim.vhd (THIS FILE - generated)
--   Layer 3: DS1140_PD_volo_main.vhd (hand-written app logic)
--
-- Register Mapping:

--   CR20: Arm Probe → arm_probe : std_logic

--   CR21: Force Fire → force_fire : std_logic

--   CR22: Reset FSM → reset_fsm : std_logic

--   CR23: Clock Divider → clock_divider : std_logic_vector(7 downto 0)

--   CR24: Arm Timeout → arm_timeout : std_logic_vector(15 downto 0)

--   CR25: Firing Duration → firing_duration : std_logic_vector(7 downto 0)

--   CR26: Cooling Duration → cooling_duration : std_logic_vector(7 downto 0)

--   CR27: Trigger Threshold → trigger_threshold : std_logic_vector(15 downto 0)

--   CR28: Intensity → intensity : std_logic_vector(15 downto 0)

--
-- References:
--   - docs/VOLO_APP_DESIGN.md
--   - DS1140_PD_app.yaml
--------------------------------------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

library WORK;
use WORK.volo_common_pkg.all;

entity DS1140_PD_volo_shim is
    port (
        ------------------------------------------------------------------------
        -- Clock and Reset
        ------------------------------------------------------------------------
        Clk         : in  std_logic;
        Reset       : in  std_logic;  -- Active-high reset

        ------------------------------------------------------------------------
        -- VOLO Control Signals (from MCC_TOP_volo_loader)
        ------------------------------------------------------------------------
        volo_ready  : in  std_logic;  -- CR0[31] - Set by loader
        user_enable : in  std_logic;  -- CR0[30] - User control
        clk_enable  : in  std_logic;  -- CR0[29] - Clock gating
        loader_done : in  std_logic;  -- BRAM loader FSM done signal

        ------------------------------------------------------------------------
        -- Application Registers (from MCC_TOP_volo_loader)
        -- Raw Control Registers CR20-CR30
        ------------------------------------------------------------------------

        app_reg_20 : in  std_logic_vector(31 downto 0);

        app_reg_21 : in  std_logic_vector(31 downto 0);

        app_reg_22 : in  std_logic_vector(31 downto 0);

        app_reg_23 : in  std_logic_vector(31 downto 0);

        app_reg_24 : in  std_logic_vector(31 downto 0);

        app_reg_25 : in  std_logic_vector(31 downto 0);

        app_reg_26 : in  std_logic_vector(31 downto 0);

        app_reg_27 : in  std_logic_vector(31 downto 0);

        app_reg_28 : in  std_logic_vector(31 downto 0);


        ------------------------------------------------------------------------
        -- BRAM Interface (from volo_bram_loader FSM)
        ------------------------------------------------------------------------
        bram_addr   : in  std_logic_vector(11 downto 0);  -- 4KB address space
        bram_data   : in  std_logic_vector(31 downto 0);  -- 32-bit data
        bram_we     : in  std_logic;                      -- Write enable

        ------------------------------------------------------------------------
        -- MCC I/O (from CustomWrapper)
        -- Native MCC types: signed(15 downto 0) for all ADC/DAC channels
        ------------------------------------------------------------------------
        InputA      : in  signed(15 downto 0);
        InputB      : in  signed(15 downto 0);
        OutputA     : out signed(15 downto 0);
        OutputB     : out signed(15 downto 0);
        OutputC     : out signed(15 downto 0)
    );
end entity DS1140_PD_volo_shim;

architecture rtl of DS1140_PD_volo_shim is

    ----------------------------------------------------------------------------
    -- Friendly Signal Declarations (MCC-Agnostic Interface)
    ----------------------------------------------------------------------------

    signal arm_probe : std_logic;  -- Arm the probe driver (one-shot operation, READY→ARMED transition)

    signal force_fire : std_logic;  -- Manual trigger for testing (bypasses threshold detection)

    signal reset_fsm : std_logic;  -- Reset state machine to READY state

    signal clock_divider : std_logic_vector(7 downto 0);  -- FSM timing control divider (0=÷1, 1=÷2, ..., 15=÷16)

    signal arm_timeout : std_logic_vector(15 downto 0);  -- Cycles to wait for trigger before timeout (0-4095, 12-bit used)

    signal firing_duration : std_logic_vector(7 downto 0);  -- Number of cycles to remain in FIRING state (max 32)

    signal cooling_duration : std_logic_vector(7 downto 0);  -- Number of cycles to remain in COOLING state (min 8)

    signal trigger_threshold : std_logic_vector(15 downto 0);  -- Voltage threshold for trigger detection (16-bit signed ±5V, 2.4V = 0x3DCF)

    signal intensity : std_logic_vector(15 downto 0);  -- Output intensity voltage (16-bit signed, hardware clamped to 3.0V = 0x4CCD)


    ----------------------------------------------------------------------------
    -- Global Enable Signal
    -- Combines all VOLO_READY control bits for safe operation
    ----------------------------------------------------------------------------
    signal global_enable : std_logic;

begin

    ----------------------------------------------------------------------------
    -- Global Enable Computation
    --
    -- All 4 conditions must be met for app to operate:
    --   1. volo_ready  = 1  (loader has deployed bitstream)
    --   2. user_enable = 1  (user has enabled module)
    --   3. clk_enable  = 1  (clock gating enabled)
    --   4. loader_done = 1  (BRAM loading complete)
    ----------------------------------------------------------------------------
    global_enable <= combine_volo_ready(volo_ready, user_enable, clk_enable, loader_done);

    ----------------------------------------------------------------------------
    -- Register Mapping: Control Registers → Friendly Signals
    --
    -- Extract appropriate bit ranges from raw Control Registers
    -- based on register type (COUNTER_8BIT, PERCENT, BUTTON)
    ----------------------------------------------------------------------------

    arm_probe <= app_reg_20(31);  -- Arm Probe

    force_fire <= app_reg_21(31);  -- Force Fire

    reset_fsm <= app_reg_22(31);  -- Reset FSM

    clock_divider <= app_reg_23(31 downto 24);  -- Clock Divider

    arm_timeout <= app_reg_24(31 downto 16);  -- Arm Timeout

    firing_duration <= app_reg_25(31 downto 24);  -- Firing Duration

    cooling_duration <= app_reg_26(31 downto 24);  -- Cooling Duration

    trigger_threshold <= app_reg_27(31 downto 16);  -- Trigger Threshold

    intensity <= app_reg_28(31 downto 16);  -- Intensity


    ----------------------------------------------------------------------------
    -- Instantiate Application Main Entity
    --
    -- MCC-agnostic interface using friendly signal names only
    ----------------------------------------------------------------------------
    APP_MAIN_INST: entity WORK.DS1140_PD_volo_main
        port map (
            -- Standard Control Signals
            Clk     => Clk,
            Reset   => Reset,
            Enable  => global_enable,
            ClkEn   => clk_enable,

            -- Friendly Application Signals

            arm_probe => arm_probe,

            force_fire => force_fire,

            reset_fsm => reset_fsm,

            clock_divider => clock_divider,

            arm_timeout => arm_timeout,

            firing_duration => firing_duration,

            cooling_duration => cooling_duration,

            trigger_threshold => trigger_threshold,

            intensity => intensity,


            -- BRAM Interface (always exposed for consistency)
            bram_addr => bram_addr,
            bram_data => bram_data,
            bram_we   => bram_we,

            -- MCC I/O
            InputA  => InputA,
            InputB  => InputB,
            OutputA => OutputA,
            OutputB => OutputB,
            OutputC => OutputC
        );

end architecture rtl;